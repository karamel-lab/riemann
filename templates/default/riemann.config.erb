; -*- mode: clojure; -*-
; vim: filetype=clojure

(logging/init {:file "riemann.log"})

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "<%= node.riemann.server.bind %>"]
  (tcp-server :host host :port <%= node.riemann.server.port %> )
  (ws-server  :host host :port <%= node.riemann.dash.port %> ))

(require '[clj-http.client :as client]
	'[riemann.query :as query])

; Expire old events from the index every 5 seconds.
(periodically-expire 5)

(let [index (index)]
  (streams
    (where (state "tablespoon")
     (by :service
      (where (tagged "GROUP_MEDIAN")
        (coalesce 5
          (smap folds/median 
            (tag "median"
              (with :host nil
                index
                )))
          ))
      (where (tagged "GROUP_AVERAGE")
        (coalesce 5
          (smap (fn [events] 
            (let [ordered (->> events 
              (remove (comp nil? :metric)) 
              (sort-by :metric) 
              vec)]
            (let [amount (int (Math/floor (* (count ordered) 0.1)))]
              (folds/mean (drop-last amount (drop amount ordered))))))
          (tag "average"
            (with :host nil
              index)))
          ))
      (where (tagged "REGULAR")
        index)
      ))))

(include "<%= node.riemann.config_userfile %>")
